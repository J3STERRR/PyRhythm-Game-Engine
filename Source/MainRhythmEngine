import pygame
import random
import time
import json
import secrets
import math
import socket
import socketserver
import threading

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
PURPLE = (128, 0, 128)
COLOR_TABLE = [PURPLE, GREEN, RED, BLACK, WHITE]
LINE_Y = 500  # Line where notes should be hit
MAX_MISSES = 10  # Maximum number of misses before game over
NOTE_SPEED_DEFAULT = 5  # Default speed of falling notes
VOLUME_DEFAULT = 0.5  # Default volume (range 0.0 to 1.0)
TEXT_DURATION = 0.5  # Time duration to show "Perfect" or "Miss"
MAX_HEALTH = 100  # Maximum health

# File for storing settings
SETTINGS_FILE = "settings.json"

# Setup screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("PyRhythm Game Engine")

# Game clock
clock = pygame.time.Clock()

# Function to load settings from file
def load_settings():
    try:
        with open(SETTINGS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        # If no settings file exists, return defaults
        return {"note_speed": NOTE_SPEED_DEFAULT, "volume": VOLUME_DEFAULT}

# Function to save settings to file
def save_settings(note_speed, volume):
    settings = {"note_speed": note_speed, "volume": volume}
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f)

# Define a Note class
class Note:
    def __init__(self, x, y, color, key, time_stamp):
        self.x = x
        self.y = y
        self.color = color
        self.key = key  # The key to press (e.g., 'a', 's', 'd', etc.)
        self.time_stamp = time_stamp  # Time the note should appear (in seconds)

    def update(self):
        self.y += NOTE_SPEED  # Speed of falling notes

    def draw(self):
        pygame.draw.circle(screen, self.color, (self.x, self.y), 20)

# Define the Player class (character as a square)
class Player:
    def __init__(self):
        self.x = SCREEN_WIDTH // 2 - 25  # Starting position in the middle
        self.y = SCREEN_HEIGHT - 50  # Place it near the bottom
        self.width = 50  # Width of the square
        self.height = 50  # Height of the square
        self.color = (0, 0, 255)  # Blue color for the player

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

# Function to generate notes based on the chart
def generate_notes(chart):
    notes = []
    for event in chart:
        lane_x_positions = [200, 300, 400, 500]  # X positions for notes
        note_x = lane_x_positions[event['lane']]
        note = Note(note_x, 0, random.choice([RED, GREEN, PURPLE, BLACK]), event['key'], event['time'])
        notes.append(note)
    return notes

# Function to create a button (rectangular area) on the screen
def create_button(text, x, y, width, height, font, color, text_color):
    button_rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(screen, color, button_rect)
    label = font.render(text, True, text_color)
    screen.blit(label, (x + (width - label.get_width()) // 2, y + (height - label.get_height()) // 2))
    return button_rect

# Function to check if a button was clicked
def button_click(button_rect):
    mouse_pos = pygame.mouse.get_pos()
    mouse_click = pygame.mouse.get_pressed()
    if button_rect.collidepoint(mouse_pos) and mouse_click[0]:
        return True
    return False

def draw_arrow(x, y, direction):
    """Draws an arrow for adjusting settings. Direction can be 'left' or 'right'."""
    arrow_size = 20
    if direction == 'left':
        pygame.draw.polygon(screen, BLACK, [(x, y), (x + arrow_size, y - arrow_size), (x + arrow_size, y + arrow_size)])
    elif direction == 'right':
        pygame.draw.polygon(screen, BLACK, [(x, y), (x - arrow_size, y - arrow_size), (x - arrow_size, y + arrow_size)])

{
    "volume": 0.5,
    "note_speed": 5
}

def pause_screen():
    """Display the pause menu with options: Resume, Restart, Quit."""
    font = pygame.font.SysFont("Arial", 40)
    running = True
    while running:
        screen.fill(BLACK)

        # Pause menu title
        title_text = font.render("Game Paused", True, WHITE)
        screen.blit(title_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 4))

        # Resume button
        resume_button = create_button("Resume", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 2, 200, 50, font, BLACK, WHITE)
        
        # Restart button
        restart_button = create_button("Restart", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 1.5, 200, 50, font, BLACK, WHITE)
        
        # Quit button
        quit_button = create_button("Quit", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 1.2, 200, 50, font, BLACK, WHITE)

        pygame.display.update()

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                # Check if any button is clicked
                if button_click(resume_button):
                    return "resume"
                elif button_click(restart_button):
                    return "restart"
                elif button_click(quit_button):
                    return "quit"
        
        # If user presses escape, return to the game
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    return "resume"  # Resume the game if escape is pressed

    return "resume"  # Default action if no button is clicked

def create_button(text, x, y, width, height, font, color, text_color):
    button_rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(screen, color, button_rect)
    label = font.render(text, True, text_color)
    screen.blit(label, (x + (width - label.get_width()) // 2, y + (height - label.get_height()) // 2))
    return button_rect



def load_settings(filename="settings.json"):
    """Load the settings from a JSON file. If the file doesn't exist or is empty, use default settings."""
    try:
        with open(filename, 'r') as f:
            file_contents = f.read()  # Read the entire file
            print("File Contents:", file_contents)  # Print to check contents
            data = json.loads(file_contents)  # Attempt to load JSON
            return data
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"Error loading settings: {e}")
        return {"volume": 0.5, "note_speed": 5}  # Return default values on error

def settings_screen(note_speed, volume):
    font = pygame.font.SysFont("Arial", 40)
    running = True
    while running:
        screen.fill(WHITE)

        # Settings title
        title_text = font.render("Settings", True, BLACK)
        screen.blit(title_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 4))

        # Volume control text
        volume_text = font.render(f"Volume: {int(volume * 100)}%", True, BLACK)
        screen.blit(volume_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 - 50))

        # Draw volume decrease and increase arrows
        draw_arrow(SCREEN_WIDTH // 4 - 50, SCREEN_HEIGHT // 2, 'left')  # Left arrow (decrease volume)
        draw_arrow(SCREEN_WIDTH // 4 + 150, SCREEN_HEIGHT // 2, 'right')  # Right arrow (increase volume)

        # Note speed control text
        note_speed_text = font.render(f"Note Speed: {int(note_speed)}", True, BLACK)
        screen.blit(note_speed_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2 + 50))

        # Draw note speed decrease and increase arrows
        draw_arrow(SCREEN_WIDTH // 4 - 50, SCREEN_HEIGHT // 2 + 100, 'left')  # Left arrow (decrease speed)
        draw_arrow(SCREEN_WIDTH // 4 + 150, SCREEN_HEIGHT // 2 + 100, 'right')  # Right arrow (increase speed)

        # Create the Back button
        back_button = create_button("Back", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 1.5, 200, 50, font, GREEN, WHITE)

        # Automatically save settings when the user changes them
        save_settings(note_speed, volume)

        pygame.display.update()

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                save_settings(note_speed, volume)  # Save settings when quitting
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                # Check if left arrow (volume decrease) is clicked
                if pygame.Rect(SCREEN_WIDTH // 4 - 50, SCREEN_HEIGHT // 2 - 20, 50, 50).collidepoint(mouse_pos):
                    volume = max(0.0, volume - 0.1)  # Decrease volume
                    pygame.mixer.music.set_volume(volume)  # Apply new volume to music
                # Check if right arrow (volume increase) is clicked
                if pygame.Rect(SCREEN_WIDTH // 4 + 150, SCREEN_HEIGHT // 2 - 20, 50, 50).collidepoint(mouse_pos):
                    volume = min(1.0, volume + 0.1)  # Increase volume
                    pygame.mixer.music.set_volume(volume)  # Apply new volume to music
                # Check if left arrow (note speed decrease) is clicked
                if pygame.Rect(SCREEN_WIDTH // 4 - 50, SCREEN_HEIGHT // 2 + 70, 50, 50).collidepoint(mouse_pos):
                    note_speed = max(1, note_speed - 1)  # Decrease note speed
                # Check if right arrow (note speed increase) is clicked
                if pygame.Rect(SCREEN_WIDTH // 4 + 150, SCREEN_HEIGHT // 2 + 70, 50, 50).collidepoint(mouse_pos):
                    note_speed = min(10, note_speed + 1)  # Increase note speed
                # Check if Back button is clicked
                if button_click(back_button):
                    return "back"  # Return to the main menu

        # Automatically save settings when changes are made
        save_settings(note_speed, volume)



# Main menu screen
def main_menu():
    font = pygame.font.SysFont("Arial", 40)
    running = True
    while running:
        screen.fill(WHITE)
        
        # Main menu title
        title_text = font.render("Rhythm Game", True, BLACK)
        screen.blit(title_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 4))
        
        # Start game button
        start_button = create_button("Start Game", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 2, 200, 50, font, GREEN, WHITE)
        
        # Settings button
        settings_button = create_button("Settings", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 1.5, 200, 50, font, GREEN, WHITE)
        
        pygame.display.update()

        # Check if the buttons are clicked
        if button_click(start_button):
            return "start"
        elif button_click(settings_button):
            result = settings_screen(NOTE_SPEED, VOLUME)  # Go to settings screen
            if result == "back":
                return "back"  # Return to main menu
        
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False


# Main game loop
def game_loop(chart, note_speed, volume):
    pygame.mixer.music.set_volume(volume)  # Set the initial volume
    pygame.mixer.music.load("Assets/Music/J3STERFUNNY.mp3")  # Load your song/music file (change path accordingly)
    pygame.mixer.music.play(loops=-1, fade_ms=2000)  # Play the music indefinitely with a fade-in effect

    hit_sound = pygame.mixer.Sound("Assets/Sounds/hit_sound.wav")  # Load the hit sound file
    running = True
    score = 0
    misses = 0
    health = MAX_HEALTH  # Start with full health
    combo = 0  # Initialize the combo counter
    player = Player()
    notes = generate_notes(chart)
    game_paused = False
    start_time = time.time()  # Track the start time to sync notes with the game timer
    last_hit_time = 0  # To track the timing of the "Perfect" or "Miss" message
    hit_message = ""  # Message to display ("Perfect" or "Miss")
    hit_message_time = 0  # Time to show the hit message

    while running:
        screen.fill(WHITE)

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                player_input = None
                if event.key == pygame.K_a:
                    player_input = 'a'
                elif event.key == pygame.K_s:
                    player_input = 's'
                elif event.key == pygame.K_d:
                    player_input = 'd'
                elif event.key == pygame.K_f:
                    player_input = 'f'
                elif event.key == pygame.K_ESCAPE:  # Pause the game
                    game_paused = True

                # Check if the player pressed the correct key at the right time
                if not game_paused:
                    for note in notes[:]:  # Iterate over a copy of notes list to modify during loop
                        if note.y >= LINE_Y - 20 and note.y <= LINE_Y + 20:
                            if note.key == player_input:
                                score += 1
                                hit_message = "Perfect"
                                hit_message_time = time.time()  # Set the time to display the message
                                
                                # Play the hit sound when the note is perfectly hit
                                hit_sound.play()  # Play the sound when the player hits the note perfectly

                                # Increase health on "Perfect" hit (make sure health doesn't exceed MAX_HEALTH)
                                health = min(health + 10, MAX_HEALTH)  # Increase health by 10, but cap at MAX_HEALTH
                                
                                # Increase combo if the hit is perfect
                                combo += 1  # Increment combo for consecutive hits
                                
                                notes.remove(note)  # Remove the note once caught
                            else:
                                # If the key is wrong, reset the combo
                                combo = 0

        # Pause the game if requested
        if game_paused:
            result = pause_screen()
            if result == "resume":
                game_paused = False
            elif result == "restart":
                game_loop(chart, note_speed, volume)  # Restart the game
                running = False  # Exit the loop to restart
            elif result == "quit":
                running = False  # Exit the loop to quit

        if not game_paused:
            # Update and draw notes
            current_time = time.time() - start_time  # Calculate elapsed time since game started
            for note in notes[:]:  # Iterate over a copy of notes list to modify during loop
                if note.time_stamp <= current_time:  # Show note at the correct time
                    note.update()
                    note.draw()

                # If a note has passed the line, it's a miss
                if note.y >= LINE_Y + 20:  # If the note is below the line
                    misses += 1
                    health -= 10  # Decrease health when the player misses
                    hit_message = "Miss"
                    hit_message_time = time.time()  # Set the time to display the message
                    combo = 0  # Reset the combo on miss
                    notes.remove(note)

            # Check if the player has lost all health
            if health <= 0:
                health = 0
                running = False  # End the game if health is 0

            # Draw the line where the notes should be hit
            pygame.draw.line(screen, BLACK, (0, LINE_Y), (SCREEN_WIDTH, LINE_Y), 5)

            # Display the score and miss count
            font = pygame.font.SysFont("Arial", 30)
            score_text = font.render(f"Score: {score}", True, BLACK)
            screen.blit(score_text, (10, 10))

            miss_text = font.render(f"Misses: {misses}/{MAX_MISSES}", True, BLACK)
            screen.blit(miss_text, (SCREEN_WIDTH - 150, 10))

            # Display the combo meter
            combo_text = font.render(f"Combo: {combo}", True, (255, 140, 0))  # Orange for combo
            screen.blit(combo_text, (SCREEN_WIDTH // 2 - combo_text.get_width() // 2, 10))

            # Draw the player character (the square)
            #player.draw()

            # Draw the health bar
            pygame.draw.rect(screen, BLACK, (10, 40, 200, 20))  # Background of health bar
            pygame.draw.rect(screen, RED, (10, 40, (200 * health) / MAX_HEALTH, 20))  # Actual health bar

            # Show "Perfect" or "Miss" message
            if time.time() - hit_message_time < TEXT_DURATION:
                hit_font = pygame.font.SysFont("Arial", 40)
                hit_text = hit_font.render(hit_message, True, GREEN if hit_message == "Perfect" else RED)
                screen.blit(hit_text, (SCREEN_WIDTH // 2 - hit_text.get_width() // 2, SCREEN_HEIGHT // 3))

            # Game over check
            if health <= 0:
                game_over_font = pygame.font.SysFont("Arial", 50)
                game_over_text = game_over_font.render("Game Over!", True, RED)
                screen.blit(game_over_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 3))

                restart_text = font.render("Press Enter to Restart", True, BLACK)
                screen.blit(restart_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 2))

                pygame.display.update()

                # Wait for player input to restart or quit
                waiting_for_input = True
                while waiting_for_input:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            running = False
                            waiting_for_input = False
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_RETURN:  # Enter key pressed
                                game_loop(chart, note_speed, volume)  # Restart the game
                                waiting_for_input = False
                                

                break  # Exit the game loop after restart or quit


        # Update the screen
        pygame.display.update()

        # Cap the frame rate
        clock.tick(60)

# Run the game with a sample chart
if __name__ == "__main__":
    settings = load_settings()  # Load the settings
    NOTE_SPEED = settings["note_speed"]
    VOLUME = settings["volume"]

    # Show the main menu first
    menu_result = main_menu()
    if menu_result == "start":
        #chart = [ #Test Chart For Release
        #    {"time": 0.5, "key": "a", "lane": 0},
        #    {"time": 1.0, "key": "s", "lane": 1},
        #    {"time": 1.5, "key": "d", "lane": 2},
        #    {"time": 2.0, "key": "f", "lane": 3},
        #    {"time": 2.5, "key": "a", "lane": 0},
        #    {"time": 3.0, "key": "f", "lane": 3},
        #    {"time": 3.3, "key": "a", "lane": 0},
        #    {"time": 3.7, "key": "f", "lane": 3},
        #    {"time": 4.2, "key": "d", "lane": 2},
        #    {"time": 4.4, "key": "s", "lane": 1},
        #    {"time": 4.5, "key": "s", "lane": 1},
        #]

        charter = [
            {"time": 0.5, "key": "a", "lane": 0},
            {"time": 0.7, "key": "a", "lane": 0},
            {"time": 0.9, "key": "a", "lane": 0},
            {"time": 1.1, "key": "a", "lane": 0},
            {"time": 1.3, "key": "s", "lane": 1},
            {"time": 1.5, "key": "f", "lane": 3},
            {"time": 1.7, "key": "d", "lane": 2},
            {"time": 1.9, "key": "a", "lane": 0},
            {"time": 2.1, "key": "s", "lane": 1},
            {"time": 2.3, "key": "f", "lane": 3},
            {"time": 2.4, "key": "f", "lane": 3},
            {"time": 2.6, "key": "d", "lane": 2},
            {"time": 2.9, "key": "a", "lane": 0},
            {"time": 3.1, "key": "d", "lane": 2},
            {"time": 3.2, "key": "a", "lane": 0},
            {"time": 3.4, "key": "s", "lane": 1},
            {"time": 3.6, "key": "f", "lane": 3},
            {"time": 3.8, "key": "f", "lane": 3},
            {"time": 4.0, "key": "d", "lane": 2},
        ]
        #game_loop(chart, NOTE_SPEED, VOLUME)  # Start the game with the example chart
        game_loop(charter, NOTE_SPEED, VOLUME)  # Testing My Charting Skills
    elif menu_result == "settings":
        settings_screen(NOTE_SPEED, VOLUME)  # Go to settings screen

    pygame.quit()
